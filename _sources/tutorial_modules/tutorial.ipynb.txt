{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "E-Learning.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sZWwhvr003qh"
      },
      "source": [
        "# The Data Driven Newsvendor"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AsyklZjLFdha"
      },
      "source": [
        "The newsvendor problem is a classical single period inventory problem, which involves making decisions on order quantities under uncertainty in demand. The traditional way to solve the problem assumes knowledge of the probability distribution of demand. However, in practice, the decision maker does not know the true demand distribution. \n",
        "\n",
        "In this tutorial you will learn how to solve the newsvendor problem when the underlying demand distribution is unknown but the decision maker has access to historical demand observations. For this purpose the tutorial is structured as follows:\n",
        "\n",
        "* In the first part, we will recap the classical newsvendor problem\n",
        "* In the second part, we will see how to solve the problem by applying the traditional parametric approach\n",
        "* Finally, in the third part we will cover different data-driven approaches to solve the newsvendor problem.\n",
        "\n",
        "Moreover, you will learn how to use our ``ddop`` python API to apply the different approaches on a real world dataset."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qVPG-56Snuhx"
      },
      "source": [
        "## Example"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pvQs1CXvns-c"
      },
      "source": [
        "In the following, we will consider the real world problem of YAZ. YAZ is a fast casual restaurant in Stuttgart providing great oriental cuisine. The main ingredients for the meals at YAZ, e.g. steak, lamb, fish etc. are prepared at a central factory and are deep-frozen to achieve longer shelf lives. Depending on the estimated demand for the next day, the restaurant manager  has to decide how much of the ingredients to defrost over night. These defrosted ingredients/meals then have to be sold within the following day. If the defrosted quantity was to low to meet the demand this will incur underage cost of $cu$. On the other hand, if the quantity was to high, unsold ingredients have to be disposed which in turn will lead to overage cost of $co$. Therefore, the store manager wants to choose the order quantity that minimizes the sum of the expected costs. So as you can see, YAZ is facing a typical single period inventory problem (newsvendor problem)\n",
        "\n",
        "![](https://drive.google.com/uc?export=view&id=1UPRyUC56wMVd554iHsvOks-MBJaXYwMf)  \n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0qe8XBhRKT2i"
      },
      "source": [
        "## Getting Started\n",
        "Before we are ready to start we have to load the libraries we will need in the following."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hOeFO5aar40f"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from ddop.datasets import load_yaz\n",
        "from ddop.metrics import average_costs\n",
        "from ddop.newsvendor import SampleAverageApproximationNewsvendor\n",
        "from ddop.newsvendor import RandomForestWeightedNewsvendor \n",
        "from ddop.newsvendor import KNeighborsWeightedNewsvendor\n",
        "from ddop.newsvendor import LinearRegressionNewsvendor\n",
        "from ddop.newsvendor import DeepLearningNewsvendor\n",
        "from matplotlib import pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import scipy\n",
        "from scipy.stats import norm"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "33U5qv-WKTw5"
      },
      "source": [
        "You can install missing packages by uncommenting and executing the following cell:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NCdRffbpKh_C"
      },
      "source": [
        "pip install tensorflow==2.1.0 scikit-learn==0.23.0 keras==2.3.1 ddop seaborn==0.10.1 matplotlib"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H2MG2OPDjaGS"
      },
      "source": [
        "## Data\n",
        "\n",
        "As mentioned in the beginning, we we will consider the real world problem of Yaz within this tutorial. Therefore, we will use the Yaz dataset that is already included in `ddop`. The dataset stores the demand data for seven main ingredients (calamari, fish, shrimp, chicken, koefte, lamb and steak) over 760 days. In addition, it comes with a bunch of different demand features that we expect to be korrelated to the demand. These features include information about the day, month, year, weather conditions and more. You can load the dataset using the `load_yaz` function:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q9mlUIGDm9CO"
      },
      "source": [
        "yaz = load_yaz(one_hot_encoding=True)"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vRU9nUd_qBE0"
      },
      "source": [
        "`load_yaz` will return an object containing the feature data, the target variables as well as the whole dataframe. You can access the dataframe using the `frame` attribute: "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UL-ZdhdltKwC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 425
        },
        "outputId": "8c1ee499-fa9e-40a7-9178-1e027a6acc1e"
      },
      "source": [
        "df = yaz.frame\n",
        "df"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ISHOLIDAY</th>\n",
              "      <th>WEEKEND</th>\n",
              "      <th>WIND</th>\n",
              "      <th>CLOUDS</th>\n",
              "      <th>RAINFALL</th>\n",
              "      <th>HOURS_OF_SUNSHINE</th>\n",
              "      <th>TEMPERATURE</th>\n",
              "      <th>WEEKDAY_FRI</th>\n",
              "      <th>WEEKDAY_MON</th>\n",
              "      <th>WEEKDAY_SAT</th>\n",
              "      <th>WEEKDAY_SUN</th>\n",
              "      <th>WEEKDAY_THU</th>\n",
              "      <th>WEEKDAY_TUE</th>\n",
              "      <th>WEEKDAY_WED</th>\n",
              "      <th>MONTH_APR</th>\n",
              "      <th>MONTH_AUG</th>\n",
              "      <th>MONTH_DEC</th>\n",
              "      <th>MONTH_FEB</th>\n",
              "      <th>MONTH_JAN</th>\n",
              "      <th>MONTH_JUL</th>\n",
              "      <th>MONTH_JUN</th>\n",
              "      <th>MONTH_MAR</th>\n",
              "      <th>MONTH_MAY</th>\n",
              "      <th>MONTH_NOV</th>\n",
              "      <th>MONTH_OCT</th>\n",
              "      <th>MONTH_SEP</th>\n",
              "      <th>YEAR_2013</th>\n",
              "      <th>YEAR_2014</th>\n",
              "      <th>YEAR_2015</th>\n",
              "      <th>CALAMARI</th>\n",
              "      <th>FISH</th>\n",
              "      <th>SHRIMP</th>\n",
              "      <th>CHICKEN</th>\n",
              "      <th>KOEFTE</th>\n",
              "      <th>LAMB</th>\n",
              "      <th>STEAK</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.9</td>\n",
              "      <td>7.7</td>\n",
              "      <td>0.1</td>\n",
              "      <td>150</td>\n",
              "      <td>15.9</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>12</td>\n",
              "      <td>40</td>\n",
              "      <td>23</td>\n",
              "      <td>50</td>\n",
              "      <td>36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2.7</td>\n",
              "      <td>6.9</td>\n",
              "      <td>10.7</td>\n",
              "      <td>0</td>\n",
              "      <td>13.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>8</td>\n",
              "      <td>5</td>\n",
              "      <td>44</td>\n",
              "      <td>36</td>\n",
              "      <td>37</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.4</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0</td>\n",
              "      <td>10.6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>11</td>\n",
              "      <td>19</td>\n",
              "      <td>12</td>\n",
              "      <td>22</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.3</td>\n",
              "      <td>6.4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>176</td>\n",
              "      <td>13.3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>28</td>\n",
              "      <td>13</td>\n",
              "      <td>28</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.7</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>13.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "      <td>9</td>\n",
              "      <td>22</td>\n",
              "      <td>18</td>\n",
              "      <td>29</td>\n",
              "      <td>29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>755</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.6</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>3.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>47</td>\n",
              "      <td>30</td>\n",
              "      <td>32</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>756</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.8</td>\n",
              "      <td>2.2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>362</td>\n",
              "      <td>14.6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>13</td>\n",
              "      <td>38</td>\n",
              "      <td>31</td>\n",
              "      <td>14</td>\n",
              "      <td>38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>757</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.8</td>\n",
              "      <td>0.7</td>\n",
              "      <td>0.0</td>\n",
              "      <td>405</td>\n",
              "      <td>14.7</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>11</td>\n",
              "      <td>47</td>\n",
              "      <td>32</td>\n",
              "      <td>42</td>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>758</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.9</td>\n",
              "      <td>6.9</td>\n",
              "      <td>0.0</td>\n",
              "      <td>44</td>\n",
              "      <td>16.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>9</td>\n",
              "      <td>50</td>\n",
              "      <td>40</td>\n",
              "      <td>44</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>759</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.9</td>\n",
              "      <td>5.6</td>\n",
              "      <td>0.0</td>\n",
              "      <td>46</td>\n",
              "      <td>17.3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>45</td>\n",
              "      <td>25</td>\n",
              "      <td>6</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>760 rows × 36 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     ISHOLIDAY  WEEKEND  WIND  CLOUDS  ...  CHICKEN  KOEFTE  LAMB  STEAK\n",
              "0            0        0   1.9     7.7  ...       40      23    50     36\n",
              "1            0        1   2.7     6.9  ...       44      36    37     30\n",
              "2            0        1   1.4     8.0  ...       19      12    22     16\n",
              "3            0        0   2.3     6.4  ...       28      13    28     22\n",
              "4            0        0   1.7     8.0  ...       22      18    29     29\n",
              "..         ...      ...   ...     ...  ...      ...     ...   ...    ...\n",
              "755          0        0   1.6     8.0  ...       47      30    32     32\n",
              "756          0        0   1.8     2.2  ...       38      31    14     38\n",
              "757          0        0   1.8     0.7  ...       47      32    42     24\n",
              "758          0        0   1.9     6.9  ...       50      40    44     32\n",
              "759          0        1   1.9     5.6  ...       45      25     6     20\n",
              "\n",
              "[760 rows x 36 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QcqUkc6XHxic"
      },
      "source": [
        "Similarly, you can access the feature data using the `data` attribute and the targets with the `target` attribute."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZsWcOIzbKXBW"
      },
      "source": [
        "# the feature data\n",
        "X = yaz.data\n",
        "\n",
        "# the target data\n",
        "y = yaz.target"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nqYQdDSbqCaj"
      },
      "source": [
        "As we want to built and compare different models in the course of this tutorial, we have to split the data into train- and test set. While we use the training set to build a model, we need the test set to evaluate it on unknown data."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "beem-TByq5Ft"
      },
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.75, shuffle=False)"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ietJFQ6iL4Ps"
      },
      "source": [
        "Since some models that we are going to consider are sensitive to the variance in the data, we have to normalize the feature values. We therefore use the \n",
        "`StandardScaler` from sklearn. We fit the scaler on the train set and transform both, train- and test data."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wXh9k1VrgRb9"
      },
      "source": [
        "scaler = StandardScaler()\n",
        "scaler.fit(X_train)\n",
        "X_train_scaled = scaler.transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mSo8p5usoFdq"
      },
      "source": [
        "## The classical Newsvendor Problem"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lOGx8IYP3A11"
      },
      "source": [
        "Now that we are ready to start, let us first recap the newsvendor problem: The newsvendor problem is a single period inventory problem that refers to a situation in which a seller has to determine the order quantity of perishable goods for the next selling period, after which left-over stock becomes worthless. Hence, at the end of the selling period each unit of unsold stock incurs overage costs of $co$ and each unit of demand that cannot be satisfied incurs underage costs of $cu$. Therefore, the newsvendor wants to choose the order quantity that minimizes the sum of the expected costs mentioned above.\n",
        "\n",
        "Given this background, the optimal order quantity for the newsvendor problem can be formulated as follows:\n",
        "\n",
        "\\begin{equation}\n",
        "\\min_{q\\geq 0} = E_D[cu(D-q)^+ + co(q-D)^+],\n",
        "\\tag{1}\n",
        "\\end{equation}\n",
        "\n",
        "where $D$ is the random future demand, $q$ is the order quantity, $cu$ and $co$ are the per-unit under- and overage costs and $(\\cdot)^+ := \\max\\{0,\\cdot\\}$ is a function that returns 0 if its argument is negative, and else its argument. If the demand distribution is known, then the optimal decision can be obtained as:\n",
        "\n",
        "\\begin{equation}\n",
        "q^*=F^{-1}\\biggl(\\frac{cu}{cu+co}\\biggl)=F^{-1}(\\alpha),\n",
        "\\tag{2}\n",
        "\\end{equation}\n",
        "\n",
        "where $F^{-1}(\\cdot)$ is the inverse cumulative density function of the demand distribution, and $\\alpha$ is the service level. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_JEmFUO-F0pq"
      },
      "source": [
        "## Parametric Approach"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ctHsqVk7Dm_N"
      },
      "source": [
        "Now let us go back to our example of YAZ where we want to determine how many ingredients to defrost overnight. If we knew the probability distribution for demand we could simply solve the initial optimization problem $(2)$. Unfortunately, we don’t know the probability distribution. However, we have access to historical demand samples which we can use to approximate the demand distribution. One way to do this is to fit a parametric distribution to our samples. So let's do this for a single product e.g. steak. We start by exploring the data  with a histogram. For plotting we are useing `seaborn` - a Python data visualization libary.       \n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Uylmg0qy0s-c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "03b237c3-ac7c-4d90-e7aa-e035b7f2e61d"
      },
      "source": [
        "# get the demand samples for steak\n",
        "steak_demand = y_train[\"STEAK\"] \n",
        "\n",
        "# print a histogram \n",
        "sns.distplot(steak_demand, hist=True, norm_hist=False, kde=False,\n",
        "             hist_kws={'edgecolor':'black'})\n",
        "\n",
        "plt.ylabel('Frequnecy')\n",
        "plt.xlabel('Demand')\n",
        "\n",
        "plt.show(sns)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZBofa05UWIae"
      },
      "source": [
        "This reminds of a normal distribution, doesn't it? So let us fit a normal distribution to our data by estimation the parameters $\\mu$ and $\\sigma$:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KAb0o8wR2wuN",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "21728b61-e082-4ef4-fc4c-e528122a3bec"
      },
      "source": [
        "# determine mean and standard deviation\n",
        "mean = round(y_train[\"STEAK\"].mean(),2)\n",
        "std = round(y_train[\"STEAK\"].std(),2)\n",
        "\n",
        "# plot histogram and fit a normal distribution to it\n",
        "sns.distplot(steak_demand, hist=True, fit=scipy.stats.norm, norm_hist=False, \n",
        "             kde=False, hist_kws={'edgecolor':'black'})\n",
        "\n",
        "plt.ylabel('Empirical probability')\n",
        "plt.xlabel('Demand')\n",
        "plt.title(\"Fit result: mean = %.2f,  std = %.2f\" % (mean, std))\n",
        "\n",
        "plt.show(sns)"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eM03NIn6F8ho"
      },
      "source": [
        "So now we have a normal distribution with mean = 23.37 and standard deviation = 10.24 fitted to the data. Instead of using the true demand distribution (which we do not know), we use this distribution to determine how many steaks to defrost. But before we have to define the under- and overage costs for steak. \r\n",
        "The steak manager tells us, that each unit of unsold steak costs Yaz 5€, and each unit of demand that cannot be met because Yaz has run out of inventory costs 15€."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Urydk7CT0HO_"
      },
      "source": [
        "cu = 15\n",
        "co = 5"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eZukLd2MylP_"
      },
      "source": [
        "Using these information, the newsvendor problem then tells us how many steaks to defrost overnight. \n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HP1Ah3wW07Wz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bc8b87cf-e0b8-4c43-b863-9be4b67a6847"
      },
      "source": [
        "# determine optimal inventory quantity\n",
        "q = round(norm(mean, std).ppf(cu/(cu+co)))\n",
        "q"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "30"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PZPMJrvC6HlO"
      },
      "source": [
        "We call this the traditional parametric approach, we first assume the demand falls in a family of parametric distributions, estimate its parameters, and then solve the initial optimization problem. \n",
        "\n",
        "To see how good this approach works we can calculate the average costs on the training set associated with our decision. Therefore, we use the `average_costs` function implemented in `ddop`. The function takes four arguments in the following order - the true values, the predicted values, the underage costs and the overage costs."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Iarxlf2p4xJg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "13617c3d-9588-41a2-8a61-41bc212997fc"
      },
      "source": [
        "# create array with lenght of the test set and inventory quantity q \n",
        "y_pred = np.full(y_test[\"STEAK\"].shape[0],q)\n",
        "\n",
        "# calculate and print average costs\n",
        "avg_costs = average_costs(y_test[\"STEAK\"], y_pred, cu, co)\n",
        "print(\"Average costs: \"+str(avg_costs))"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Average costs: [65.60526316]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z57p1eTR8jFL"
      },
      "source": [
        "As you can see we have average cost of 65.61€ associated with our decision. Now the question is whether we can do better. To answer this question let us go back to our data. So far we only used historical steak demand samples. However, we have access to exogenous features that we expect to have predictive power for demand. So, what we are doing next is to look if we can find a feature that correlates with the demand. We can for example inspect if the day of the week has an impact. Therefore, we estimate the mean demand for steak for each weekday. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zUh4ghxrS7vN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ef1f2793-e1a3-49e9-f6b6-d2d4547b9e57"
      },
      "source": [
        "days = ['MON','TUE','WED','THU','FRI','SAT','SUN']\n",
        "mean_per_day = []\n",
        "for day in days:\n",
        "  data = pd.concat([X_train, y_train], axis=1)\n",
        "  mean = data[data[\"WEEKDAY_\"+day] == 1][\"STEAK\"].mean()\n",
        "  mean_per_day.append(mean)\n",
        "  print(day,\": \",round(mean,2))"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "MON :  18.79\n",
            "TUE :  20.27\n",
            "WED :  21.8\n",
            "THU :  21.89\n",
            "FRI :  26.43\n",
            "SAT :  37.8\n",
            "SUN :  16.55\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8eWku2aS96sm"
      },
      "source": [
        "As we can see the demand varies a lot depending on the day of the week. While the most steak is sold on Saturdays, the least is sold on Sundays and Mondays.\r\n",
        "One way to take this information into consideration is to fit a normal distribution for each weekday."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "75b3q-V5dOAm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "032828e0-b197-4190-a46e-ccc471ed176f"
      },
      "source": [
        "# determine standard deviation for each weekday\n",
        "std_per_day = []\n",
        "for day in days:\n",
        "  data = pd.concat([X_train, y_train], axis=1)\n",
        "  std = data[data[\"WEEKDAY_\"+day] == 1][\"STEAK\"].std()\n",
        "  std_per_day.append(std)\n",
        "  print(day,\": \",round(std,2))"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "MON :  7.44\n",
            "TUE :  6.33\n",
            "WED :  6.54\n",
            "THU :  6.79\n",
            "FRI :  8.06\n",
            "SAT :  12.21\n",
            "SUN :  6.08\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "76-Su9H4ZSVM",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 729
        },
        "outputId": "514356f6-2171-4f2e-bc06-b14f44d075de"
      },
      "source": [
        "# plot \n",
        "fig, ((ax1, ax2, ax3), (ax4, ax5, ax6), \n",
        "      (ax7, ax8, ax9)) = plt.subplots(3, 3, figsize=(12,12))\n",
        "\n",
        "for i in range(9):\n",
        "  if i<=6:\n",
        "    steak_demand_day = df[df['WEEKDAY_'+days[i]]==1]['STEAK']\n",
        "\n",
        "    sns.distplot(steak_demand_day, ax=fig.axes[i], \n",
        "                 fit=scipy.stats.norm,kde=False, hist_kws={'edgecolor':'black'})\n",
        "    fig.axes[i].set_title(\"%s: mean = %.2f,  std = %.2f\" % (days[i], mean_per_day[i], std_per_day[i]))\n",
        "  \n",
        "  else:\n",
        "    fig.axes[i].set_frame_on(False)\n",
        "    fig.axes[i].get_yaxis().set_visible(False)\n",
        "    \n",
        "  fig.axes[i].set_ylabel('Empirical probability')\n",
        "  fig.axes[i].set_xlabel('Demand')\n",
        "  fig.axes[i].label_outer()"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x864 with 9 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "awIRw-D40pvg"
      },
      "source": [
        "Given these distributions, we can write a simple predict function that solves the newsvendor problem depending on the weekday:  "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dQ4yqtG3ivEW"
      },
      "source": [
        "def predict(X):\n",
        "  \"\"\"\n",
        "  For each row in X, check which day of the week it is, get the mean and \n",
        "  standard deviation of the corresponding  distribution and then calculate \n",
        "  the optimal inventory quantity.\n",
        "\n",
        "  Parameters\n",
        "  ----------\n",
        "  X : Pandas DataFrame of shape (n_samples, n_features)\n",
        "      The input samples to predict. \n",
        "\n",
        "  Returns\n",
        "  ----------\n",
        "  y : array of shape (n_samples,)\n",
        "      The predicted values\n",
        "  \"\"\"\n",
        "\n",
        "  pred = [] \n",
        "  for index, row in X.iterrows():\n",
        "    if row['WEEKDAY_MON']==1:\n",
        "      mean = mean_per_day[0]\n",
        "      std = std_per_day[0]\n",
        "    elif row['WEEKDAY_TUE']==1:\n",
        "      mean = mean_per_day[1]\n",
        "      std = std_per_day[1]\n",
        "    elif row['WEEKDAY_WED']==1:\n",
        "      mean = mean_per_day[2]\n",
        "      std = std_per_day[2]\n",
        "    elif row['WEEKDAY_THU']==1:\n",
        "      mean = mean_per_day[3]\n",
        "      std = std_per_day[3]\n",
        "    elif row['WEEKDAY_FRI']==1:\n",
        "      mean = mean_per_day[4]\n",
        "      std = std_per_day[4]\n",
        "    elif row['WEEKDAY_SAT']==1:\n",
        "      mean = mean_per_day[5]\n",
        "      std = std_per_day[5]\n",
        "    else:\n",
        "      mean = mean_per_day[6]\n",
        "      std = std_per_day[6]\n",
        "\n",
        "    q = round(norm(mean, std).ppf(cu/(cu+co)))\n",
        "    pred.append(q)\n",
        "\n",
        "  return np.array(pred)"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uD5FGO3t3XFY"
      },
      "source": [
        "Then we apply the function to the test data and calculate the average costs again. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yokIMohOqExa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3f368ee2-a7a0-4379-8c73-de8181f4a24f"
      },
      "source": [
        "# predict optimal inventory quantity\n",
        "y_pred = predict(X_test)\n",
        "\n",
        "# calculate and print average costs\n",
        "avg_costs = average_costs(y_test[\"STEAK\"], y_pred, cu, co)\n",
        "print(\"Average costs: \"+str(avg_costs))"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Average costs: [54.07894737]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "skezZM0DAGOk"
      },
      "source": [
        "Now look, we were able to reduce the average cost from 65.61€ to 54.08€. That is a great improvment! But maybe we can do even better by considering the other features of the dataset as well. To do this, we can fit a distribution  for samples with the same features - like we did before but now for more features than just the weekday. But this has two main drawbacks:\n",
        "1. Let us say we just have two features, the weekday and the month. If we would like to fit a distribution for each feature combination we would have to fit 7*12=84 distributions. This sounds like a lot of work, doesn't it?\n",
        "2. Now consider the case where it is monday and january. As you can see below we only have 8 samples with the same feature attributes. Such a small number of samples makes it hard to fit a meaningful distribution. Moreover, with increasing number of features we may not have a single sample with the same values."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pQJbsPwq_cQ3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9932defc-1eb2-4c94-c3db-f926b580646b"
      },
      "source": [
        "X_train[(X_train['WEEKDAY_MON']==1)&(X_train['MONTH_JAN']==1)].shape[0]"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "8"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6-FkKCMm6i-P"
      },
      "source": [
        "Instead of fitting a distribution for samples with the same features, we can fit a machine-learning model to predict the demand. For example we can use a decision tree. We therefore use the `DecisionTreeRegressor` from `sklearn`."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XuWbYKIjCXeH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b84b611a-6b9b-4eb5-b787-baf784edd2eb"
      },
      "source": [
        "# train a decision tree regressor\n",
        "mdl = DecisionTreeRegressor(max_depth=5, random_state=1)\n",
        "mdl.fit(X_train,y_train[\"STEAK\"])"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeRegressor(max_depth=5, random_state=1)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gsPV6abmCYG5"
      },
      "source": [
        "Of course we cannot assume the model to be perfect: first because of the model error itself, and second, because of the uncertainty in demand. For this reason, we need to adjust the predictions for uncertainty to obtain optimal decisions. We can get a representation of the remaining uncertainty by evaluating the distribution of the prediction error on the training data. Assuming the error to be distributed normal, we estimate its parameters $\\mu_{e}$ and $\\sigma_{e}$."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "muqTYTeCF5Q9"
      },
      "source": [
        "# predict on training data\n",
        "train_predicitons = mdl.predict(X_train)\n",
        "\n",
        "# estimate mean and standard deviation of the model error\n",
        "error = y_train[\"STEAK\"]-train_predicitons\n",
        "error_mean = error.mean()\n",
        "error_std = error.std()"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "na82qoObF5rC"
      },
      "source": [
        "We then pass the error distribution to the initial optimization problem to determine an additional safety stock. The final order decision is then the sum of both the prediction generated by our model and the safety stock. More formally, the newsvendor problem can then be described as:\n",
        "\n",
        "\\begin{equation}\n",
        "q(x)^{*} = \\mu(x)+\\Phi^{-1}(\\alpha),\n",
        "\\tag{3}\n",
        "\\end{equation}\n",
        "\n",
        "where $\\mu(\\cdot)$ is the function of the machine-learning model that maps from the feature vector $x$ to demand level, and $\\Phi^{-1}$ the inverse cdf of the error distribution with mean $\\mu_{e}$ and $\\sigma_{e}$."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-v2L8FlEdnHn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "194939bd-ff4e-462e-ed48-6f0040a00986"
      },
      "source": [
        "# determine safety buffer\n",
        "safety_buffer = norm(error_mean, error_std).ppf(cu/(cu+co))\n",
        "\n",
        "# predict test data \n",
        "pred = mdl.predict(X_test)\n",
        "\n",
        "# add safety buffer prediction from model\n",
        "pred = pred + safety_buffer\n",
        "\n",
        "# calculate and print average costs \n",
        "avg_costs = average_costs(y_test[\"STEAK\"], pred, cu, co)\n",
        "print(\"Average costs: \"+str(avg_costs))"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Average costs: [45.5082525]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HlUAYHl5H5XE"
      },
      "source": [
        "Again, we were able to reduce our average cost from 51.97€ to 45.51€. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XNvGez2XKm18"
      },
      "source": [
        "### Summary\n",
        "Let us now summarize what we have learned so far:\n",
        "\n",
        "* In case we don't know the demand distribution, but have access to historical demand observations, we can fit a distribution to the historical samples and then solve the initial problem.\n",
        "* We can improve our inventory decision by taking into account features. To do this, we can fit a distribution for samples with the same features. However, this does not work well for a big number of features. \n",
        "* Instead, we can fit a machine-learning model to predict demand and, given its error distribution, calculate an additional safety stock. The optimal decision is then the sum of prediction and safety stock."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6A4I14kbGLoI"
      },
      "source": [
        "## Data Driven Approach"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "62xAo8ImGQDo"
      },
      "source": [
        "In this part of the tutorial, we introduce different **\"data driven\"** approaches to solve the newsvendor problem. In contrast to the traditional way of first estimating the demand and then solving the initial optimization problem, these approches directly prescribes decisions from data. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6YREycTQGZpm"
      },
      "source": [
        "### Sample Average Approximation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K1R_kjzEGerO"
      },
      "source": [
        "In the case, where only historical demand data is available, a sensible data-driven approach is to substitute the true expectation with a sample average expectations and solve the resulting optimization problem:\n",
        "\n",
        "\\begin{equation}q^{*}=\\min _{q \\geq 0} \\frac{1}{n} \\sum_{i=1}^{n}\\left[c u\\left(d_{i}-q\\right)^{+}+c o\\left(q-d_{i}\\right)^{+}\\right]\n",
        "\\tag{4}\n",
        "\\end{equation}\n",
        "\n",
        "where $n$ is the total number of samples and $d_i$ is the ith demand observation. This approach is called **sample average approximation (SAA)**. To fully understand how this approach works, lets go through a simple example. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WsEYLBSppAf6"
      },
      "source": [
        "**Example:** Determine how many steaks to defrost applying **SAA**. The historic demand for steak is given by: $D=[27,29,30]$. You can sell steak in your restaurant for 15€ (underage costs). Unsold units incur overage costs of 5€.\n",
        "\n",
        "Let's now try to minimize the optimization problem:\n",
        "\n",
        "\\begin{equation}\n",
        ".....\\\\\n",
        "q=27: \\frac{1}{3}\\Bigl[15*(27-27)+15*(29-27)+15*(30-27)\\Bigl]=\\frac{1}{3}(15*0+15*2+5*3)=25\\\\\n",
        "q=28: \\frac{1}{3}\\Bigl[5*(28-27)+15*(29-28)+15*(30-28)\\Bigl]=\\frac{1}{3}(5*1+15*1+15*2)=16,67\\\\\n",
        "q=29: \\frac{1}{3}\\Bigl[5*(29-27)+15*(29-29)+15*(30-29)\\Bigl]=\\frac{1}{3}(5*2+15*0+15*1)=8,33\\\\\n",
        "q=30: \\frac{1}{3}\\Bigl[5*(30-27)+5*(30-29)+15*(30-30)\\Bigl]=\\frac{1}{3}(5*3+5*1+15*0)=6,67\\\\\n",
        "q=31: \\frac{1}{3}\\Bigl[5*(31-27)+5*(31-29)+5*(31-30)\\Bigl]=\\frac{1}{3}(5*4+5*2+5*1)=11,67\\\\\n",
        ".....\n",
        "\\end{equation}\n",
        "\n",
        "\n",
        "As you can see, we are trying to find the decision $q$ that minimizes the average costs on our historical samples. Consequently, in this case the optimal decision is given by $q=30$."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T0_quzqbpQoM"
      },
      "source": [
        "Now that we know how SAA works let us apply the approach on our dataset. We can therefore use the  `SampleAverageApproximationNewsvendor` class from `ddop`. To initialize the model we just have to pass the under- and overage costs. Then we can fit the model to the historical demand samples and predict the optimal decision."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1D7KackKPB0G",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ef4db2f3-a97f-40bd-d56e-ede585d246e4"
      },
      "source": [
        "SAA = SampleAverageApproximationNewsvendor(cu,co)\n",
        "SAA.fit(y_train[\"STEAK\"])\n",
        "SAA.predict()"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[28]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BBsH30e35L1D"
      },
      "source": [
        "We see, the optimal decision is 28. To calculate the average cost on the training data, we can use the model's score function. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TFX5j_3g1Rx9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "89a4422a-6b62-4f28-a118-343bc647468f"
      },
      "source": [
        "SAA.score(y_test[\"STEAK\"])"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-60.23684210526316"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tIEmJgSfGkzJ"
      },
      "source": [
        "### Weighted Sample Average Approximation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eiHpsuo31SC5"
      },
      "source": [
        "Eventhough SAA is a common and effective approach, it only considers historical demand data. However, in the first part of the tutorial we have seen that demand depends on exogenous factors such as the day. As first step, we therefore fitted a distribution for each weekday. We can now do the same here by fitting a SAA model for each weekday. This means that we are trying to find  the decision $q$ that minimizes the average cost for only samples with the same day instead of trying to find the decision $q$ that minimizes the average cost for all historical samples."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W7Juk1K8Wu5Z",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d0211717-5edd-4513-f705-e3160f483752"
      },
      "source": [
        "days = ['MON','TUE','WED','THU','FRI','SAT','SUN']\n",
        "\n",
        "pred = []\n",
        "\n",
        "SAA = SampleAverageApproximationNewsvendor(cu,co)\n",
        "\n",
        "for day in days:\n",
        "  steak_demand_day = df[df['WEEKDAY_'+day]==1]['STEAK']\n",
        "  SAA.fit(steak_demand_day)\n",
        "  pred.append(SAA.predict().item(0))\n",
        " \n",
        "print(pred)"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[21, 23, 26, 25, 30, 44, 21]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Dwpv3QD7nUFE"
      },
      "source": [
        "Now ginve the optimla decision for each day, we can write a new prediction function."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L_MhbDPNb_mX"
      },
      "source": [
        "def predict(X):\n",
        "  \"\"\"\n",
        "  Get the prediction for each sample in X depending on the weekday.\n",
        "\n",
        "  Parameters\n",
        "  ----------\n",
        "  X : Pandas DataFrame of shape (n_samples, n_features)\n",
        "      The input samples to predict. \n",
        "\n",
        "  Returns\n",
        "  ----------\n",
        "  y : array of shape (n_samples,)\n",
        "      The predicted values\n",
        "  \"\"\"\n",
        "\n",
        "  pred = [] \n",
        "  for index, row in X.iterrows():\n",
        "    if row[\"WEEKDAY_MON\"]==1:\n",
        "      pred.append(21)\n",
        "    elif row[\"WEEKDAY_TUE\"]==1:\n",
        "      pred.append(23)\n",
        "    elif row[\"WEEKDAY_WED\"]==1:\n",
        "      pred.append(26)\n",
        "    elif row[\"WEEKDAY_THU\"]==1:\n",
        "      pred.append(25)\n",
        "    elif row[\"WEEKDAY_FRI\"]==1:\n",
        "      pred.append(30)\n",
        "    elif row[\"WEEKDAY_SAT\"]==1:\n",
        "      pred.append(44)\n",
        "    else:\n",
        "      pred.append(21)\n",
        "\n",
        "  return np.array(pred)"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y75G3Un1up-x"
      },
      "source": [
        "We can then apply the function on the test set and calculate the average costs: "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Uiv1QLgxc8jK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e38e0a0f-1a70-4a79-bacf-585598285bcb"
      },
      "source": [
        "pred = predict(X_test)\n",
        "average_costs(y_test[\"STEAK\"],pred,cu,co)"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([50.5])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xjkWm0xqvecJ"
      },
      "source": [
        "Look, again we were able to reduce the average cost from 60.24€ to 50.50€ by taking into account the weekday. We could now go a step further, by fitting a model for samples with the same features. However, as we have seen in part 1, this is not the best way. Another way to take the feature information into account is to give higher weights to samples whose features are similar to those of a new instance. In other words, we can determine a weight for each historical observation based on the similarity to a new instance, and optimize the initial problem against a re-weighting of the data. To determine the sample weights we can use machine-learning techniques - for example a regression tree. To see how we can do this let us consider a small example. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7qF2qpTTN6Yx"
      },
      "source": [
        "Let's say we have the following historical samples with two features (Weekend,Temperature) and we want to calculate their weights (representing the similarity) based on a new sample $x=(0,18)$."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z2JrfBh9UOZn"
      },
      "source": [
        "| Sample| Weekend | Temperature [in °C] | Demand |\n",
        "|:-:|:-:|:--:|:--:|\n",
        "| 1| 0 | 19 | 27 |\n",
        "| 2| 1 | 25 | 29 |\n",
        "| 3| 1 | 23 | 30 |\n",
        "| 4| 0 | 25 | 18 |\n",
        "| 5| 0 | 24 | 20 |\n",
        "| 6| 0 | 22 | 23 |\n",
        "| 7| 0 | 11 | 21 |"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oI3sa4qWUpBe"
      },
      "source": [
        "First, we fit a regression tree on the historical samples, which gives us the following result:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VQ5Lo_EuSKnM"
      },
      "source": [
        "<img src=\"https://drive.google.com/uc?export=view&id=1fXW6PV2bUcnZSNByTde39k8hEgRB_5aV\" width=\"450\" align=\"center\">"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xysvlCNFN9qy"
      },
      "source": [
        "As we can see, the regression tree splits our data into four leafs based on the two features. In the next step we can use this tree to determine the sample weights. Therefore, we look to which leaf the new instance $x=(0,18)$ belongs. In the first level of the tree we follow the right path since it is no weekend. Then, given the temperature forecast of $18°$ we end up in leaf 1 together with sample 1,6 and 7, which means that these observations are most similar to $x$. Using this information we assign a weight of $\\frac{1}{3}$ to each of the three samples falling into the same leaf. The sample weights are then given by:\n",
        "\n",
        "\\begin{equation}\n",
        "w_1=1/3,\\:w_2=0,\\:w_3=0,\\:w_4=0,\\:w_5=0,\\:w_6=1/3,\\:w_7=1/3\n",
        "\\end{equation}\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TT5LqcvxVON2"
      },
      "source": [
        "Now that we have calculated the sample weights we can solve the optimization problem like we did before. The only difference now is, that we multiply each observation with its corresponding weight, which indicates the similarity to the new sample.   "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qEueZzmfJQqT"
      },
      "source": [
        "\\begin{equation}\n",
        "q=18: \\frac{1}{3}\\bigl[15*(27-18)\\bigl]+0\\bigl[15*(29-18)\\bigl]+...+0\\bigl[15*(20-18)\\bigl]+\\frac{1}{3}\\bigl[15*(23-18)\\bigl]+\\frac{1}{3}\\bigl[15*(21-18)\\bigl] = 85\\\\\n",
        "......\\\\\n",
        "q=26: \\frac{1}{3}\\bigl[15*(27-26)\\bigl]+0\\bigl[15*(29-26)\\bigl]+...+0\\bigl[5*(26-20)\\bigl]+\\frac{1}{3}\\bigl[5*(26-23)\\bigl]+\\frac{1}{3}\\bigl[5*(26-21)\\bigl] = 18.33\\\\ \n",
        "q=27: \\frac{1}{3}\\bigl[15*(27-27)\\bigl]+0\\bigl[15*(29-27)\\bigl]+...+0\\bigl[5*(27-20)\\bigl]+\\frac{1}{3}\\bigl[5*(27-23)\\bigl]+\\frac{1}{3}\\bigl[5*(27-21)\\bigl] = 16.67\\\\ \n",
        "q=28: \\frac{1}{3}\\bigl[5*(28-27)\\bigl]+0\\bigl[15*(29-28)\\bigl]+...+0\\bigl[5*(28-20)\\bigl]+\\frac{1}{3}\\bigl[5*(28-23)\\bigl]+\\frac{1}{3}\\bigl[5*(28-21)\\bigl] = 21.67\\\\\n",
        "......\\\\\n",
        "q=30: \\frac{1}{3}\\bigl[5*(30-27)\\bigl]+0\\bigl[5*(30-29)\\bigl]+...+0\\bigl[5*(30-20)\\bigl]+\\frac{1}{3}\\bigl[5*(30-23)\\bigl]+\\frac{1}{3}\\bigl[5*(30-21)\\bigl] = 30.67 \n",
        "\\end{equation}"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z6J0RYXdCF8w"
      },
      "source": [
        "So, as we can see from our calculation, $q=27$ is the quantity  minimizing the average costs on the weighted samples. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7KUZ4-wGF542"
      },
      "source": [
        "We call this approach **\"Weigthed Sample Average Approximation (wSAA)\"** as it can be seen as weighted form of SAA. More formally the problem can be stated as follow:  \n",
        "\n",
        "\\begin{equation}\n",
        "q(x)^*=\\min_{q\\geq 0} \\sum_{i=1}^{n}w_i(x)\\bigl[cu(d_i-q)^+ + co(q-d_i)\\bigl],\n",
        "\\tag{5}\n",
        "\\end{equation}"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VA6nYpKnFfiM"
      },
      "source": [
        "where $w_i(x) \\in [0,1]$ is the weight of the ith sample based on a new instance $x$. The weight function $w_i(\\cdot)$ can be considered a similarity function. In our example above we used a weight function based on a tree regressor given by:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jAbiva-OMVJE"
      },
      "source": [
        "\\begin{equation}\n",
        "w_{i}^{Tree}(x)=\\frac{\\mathbb{1}x_i \\in R(x,\\theta)}{N(x,\\theta)},\n",
        "\\end{equation}\n",
        "\n",
        "where $\\mathbb{1}$ is the indicator function, $x$ is the feature vector of a new sample, $x_i$ is the feature vector of the ith sample, $R(x)$ is the leaf containing $x$, and $N(x)$ is the number of samples falling in leaf $R(x)$. In simple terms, the function will give a wight of $\\frac{1}{N(x,\\theta)}$ to the ith sample $x_i$ if it belongs to the same leaf as the new instance $x$. If not, a weight of $0$ is assigned. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ob_e8o2hPkfd"
      },
      "source": [
        "Obviously, the performance of a wSAA approach is driven by the choice of weight function. In the following we therefore introduce two other weight functions  based on k-nearest-neighbor- and random forest regression. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "McMecIfpIEP1"
      },
      "source": [
        "**Random forest:**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YPTXWXrWazmF"
      },
      "source": [
        "\\begin{equation}\n",
        "w_{i}^{RF}(x)=\\frac{1}{T} \\sum_{t=1}^{T} \\frac{\\mathbb{1}_{x_i \\in R(x, \\theta_t)}}{N(x,\\theta_t)},\n",
        "\\end{equation}"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "srwfbcb5J6XJ"
      },
      "source": [
        "where $T$ is the number of trees in the forest, $R(x,\\theta_t)$ is the leaf of tree $t$ containing $x$ and $N(x,\\theta_t)$ is the number of samples falling in leaf $R(x,\\theta_t)$. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j4qWxSyjJvxs"
      },
      "source": [
        "**K-nearest-neighbor:**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "suiz1md_TxZ4"
      },
      "source": [
        "\\begin{equation}\n",
        "w_{i}^{k \\mathrm{NN}}(x)=\\frac{1}{k} \\mathbb{1}\\left[x_i \\text { is a } k \\mathrm{NN} \\text { of } x\\right],\n",
        "\\end{equation}"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "grIWKTo3NLWX"
      },
      "source": [
        "where $k$ is the number of neighbors. In simple terms, the function will give a weight of $\\frac{1}{k}$ to sample $x_i$ if it is a k-nearest-neighbor of $x$."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CAalmUi-klsD"
      },
      "source": [
        "We now dont want to go into more detail. Instead, let us apply wSAA on our dataset. We can therefore use the class `RandomForestWeightedNewsvendor` and `KNeighborsWeightedNewsvendor` from `ddop`. To initialize the models, we only have to pass our overage- and underage costs. However, there are more model specific parameters that we should modify. For instance, we set the maximum depth for `RandomForestWeightedNewsvendor` to 5 to avoid overfitting. Moreover, we set the number of neighbors for `KNeighborsWeightedNewsvendor` to 30. After we have initialized our models we fit them on the training data and calculate the average cost on the test set by using the `score` function:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "40nTuNuMPVur",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "84b640dd-a9f7-48e0-aa33-ac916af8dca3"
      },
      "source": [
        "cu = 15\n",
        "co = 5\n",
        "\n",
        "RFW = RandomForestWeightedNewsvendor(cu=cu, co=co, max_depth=5, criterion=\"mse\",\n",
        "                                     random_state=3)\n",
        "RFW.fit(X_train, y_train[\"STEAK\"])\n",
        "RFW_score = RFW.score(X_test,y_test[\"STEAK\"])\n",
        "print(\"Avg. cost RFW: \",RFW_score)\n",
        "\n",
        "KNW = KNeighborsWeightedNewsvendor(cu=cu, co=co, n_neighbors=30)\n",
        "KNW.fit(X_train_scaled, y_train[\"STEAK\"])\n",
        "KNW_score = KNW.score(X_test_scaled,y_test[\"STEAK\"])\n",
        "print(\"Avg. cost KNW: \", KNW_score)\n"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Avg. cost RFW:  -47.76315789473684\n",
            "Avg. cost KNW:  -47.473684210526315\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b_iXS1Cb9LZj"
      },
      "source": [
        "As we can see we were able to reduce the average costs again by using **wSAA**. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JmYRd408-ZwX"
      },
      "source": [
        "-----------------------------------------------------"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8bMErETw_NnO"
      },
      "source": [
        "### Empirical Risk Minimization"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9t4w6Uf091Fj"
      },
      "source": [
        "With wSAA we have already learned a data-driven approach that is able to consider features for decision making. However, to obtain a decision $q$, we have to first determine weights and then solve an optimization problem for every new sample $x$. But wouldn't it be great to learn a function that instead maps directly from features $x\\in X$ to a decision $q\\in Q$. A natural way to obtain such a function, given past demand samples (containing both features and demand), is though [empirical risk minimization](https://en.wikipedia.org/wiki/Empirical_risk_minimization):\r\n",
        "\\begin{equation}\r\n",
        "\\min_{q(\\cdot)\\in\\mathcal{F}} \\frac{1}{n}\\sum_{i=1}^{n}\\bigl[cu(d_i-q(x_i))^+ + co(q(x_i)-d_i)^+\\bigl],\r\n",
        "\\tag{6}\r\n",
        "\\end{equation}\r\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-4UbO-B2AYYh"
      },
      "source": [
        "where $q(\\cdot)$ is the function that maps from feature space $X$ to decision space $Q$, and $\\mathcal{F}$ is its function class. Again, $x_i$ is the feature vector of the i-th sample, and $d_i$ is the corresponding demand value. To say it simple, we try to find the function $q:X\\rightarrow Q$, that minimizes the average costs on $n$ past demand samples (the empirical risk). The most straightforward way to do this is based on linear regression. So let's look at a simple example:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UqikaLTcSzC8"
      },
      "source": [
        "#### Linear Regression"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p0UAFV1i-_0B"
      },
      "source": [
        "Suppose we consider only one demand feature, say temperature, and given the temperature we want to know how many steaks to defrost.  In other words, we want to find a function $q(temp)$, that maps from temperature to a decision $q$. Of course, the first thing we need to do is  to collect some data.  "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g7l9ajNvDZkV"
      },
      "source": [
        "| Sample| Temperature [in °C] | Demand |\r\n",
        "|:-:|:-:|:--:|\r\n",
        "| 1| 10 | 5 |\r\n",
        "| 2| 20 | 10 |\r\n",
        "| 3| 30 | 9 |"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hD76KXncFqQY"
      },
      "source": [
        "We then plot the data and as we can see it looks like there is a linear relationship between temperature and demand. Consequently, we want to find a linear function $q(temp)=b+w_1*temp$ that fits best on our data. As you can see, we therefore have to learn two variables, the intercept term $b$ and a weight $w_1$. In other words, we want to have a constant value to which we add a certain amound depending on the temperature. We start by selecting two random values, e.g. $b=0$ and $w_1=0,4$, which gives us function $q_1(temp)=0+0,4*temp$  "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Nkl9v5ibJzfd"
      },
      "source": [
        "<img src=\"https://drive.google.com/uc?export=view&id=1TC3-K8j_7hsZcJuf1RrKhyvtdwTfCkSs\" width=\"550\" align=\"center\">\r\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eRCJ1TxCPfy_"
      },
      "source": [
        "Given function $q_1(\\cdot)$ we can determine the decision $q$ for each sample in our data:\r\n",
        "\\begin{equation}\r\n",
        "q_1(10)=4\\\\\r\n",
        "q_1(20)=8\\\\\r\n",
        "q_1(30)=12\\\\\r\n",
        "\\end{equation}\r\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8lyUg_zgR0jz"
      },
      "source": [
        "In the next step, we can compare the results with the actual demand. Of course, we are interested in making cost-optimal decisions. So, to see how well the function fits our data, we can determine the average cost associated with our decisions. Recall that each unit of unsold steak costs Yaz 5€, and each unit of demand that cannot be met because Yaz has run out of inventory costs 15€, we can continue as follows:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GqLhmvdz3UAr"
      },
      "source": [
        "\\begin{equation}\r\n",
        "\\frac{1}{3}[15*(5-4)+0+5*(12-10)]=8.33\r\n",
        "\\end{equation}"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7HN9TVuV8NJ6"
      },
      "source": [
        "As we can see, function $q_1(\\cdot)$ yields average costs of 8.33€. This is really not a good result. Let us therefore change the values for $b$ and $w_1$, and define a function $q_2(temp)=4+0,2*temp$. Following the same procedure as before gives us:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9EzWE6Ut_MPq"
      },
      "source": [
        "\\begin{equation}\r\n",
        "q_2(10)=6\\\\\r\n",
        "q_2(20)=8\\\\\r\n",
        "q_2(30)=10\\\\\r\n",
        "\\frac{1}{3}[5*(6-5)+0+5*(10-9)]=3.33\r\n",
        "\\end{equation}"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Li8tiqckaVWs"
      },
      "source": [
        "Look, using function $q_2(\\cdot)$ we were able to reduce the cost down to 3.33. But maybe we can do even better. We could now do the same with other values for $b$ and $w_1$ over and over again until we find the function that minimizes the average cost on the training samples. But this sounds very tedious doesn't it? Instead, we can let a computer do this work. For this, however, we need to formalize the optimization problem at hand:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PiYxwK22BV7F"
      },
      "source": [
        "\\begin{equation}\r\n",
        "\\min_{b,w_1} \\frac{1}{n}\\sum_{i=1}^{n}\\bigl[cu(d_i-(b+w_1*temp))^+ + co((b+w_1*temp)-d_i)^+\\bigl]\r\n",
        "\\end{equation}"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0BF0744hbLVP"
      },
      "source": [
        "Doesn't this look like equation $(6)$, which we introduced at the very beginning of this chapter? The only difference is that we have defined $q(\\cdot)$ as $q(temp)=b+w_1*temp$. To be more precise, we have assumed that temperature and demand have a linear relationship. Luckily we don't have to implement the optimization problem ourselves to solve it on our computer. It is already implementet by the class `LinearRegressionNewsvendor` from `ddop`. So let's initialize the model and fit it to the data."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "byxC7JhQPulz",
        "outputId": "cd5ba4d5-248f-45e9-e7f7-a517d505fa78"
      },
      "source": [
        "temp = [[10],[20],[30]]\r\n",
        "demand = [5,8,10]\r\n",
        "mdl = LinearRegressionNewsvendor(cu=15,co=5)\r\n",
        "mdl.fit(X=temp,y=demand)"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegressionNewsvendor(co=5, cu=15)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K0x2h5NaP4bS"
      },
      "source": [
        "Once the model is fitted, we can access the intercept term $b$ via the argument `intercept_` and the weight $w_1$ via the argument `feature_weights_`. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0uKHnY47Rqfu",
        "outputId": "16bc4dd4-8205-412d-e3e2-59364fe7d2fa"
      },
      "source": [
        "print(\"b: \",mdl.intercept_)\r\n",
        "print(\"w_1: \",mdl.feature_weights_)"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "b:  [2.0]\n",
            "w_1:  [[0.3]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mp6Cix65Ue1I"
      },
      "source": [
        "Now we know that the linear function $q(\\cdot)$ that fits best on our data is given by:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BPuvIZb2VO2w"
      },
      "source": [
        "\\begin{equation}\r\n",
        "q(temp)=2+0.3*temp\r\n",
        "\\end{equation}"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i19a2ERIWB6x"
      },
      "source": [
        "In the next step we want to know how many steaks to defrost for the tomorrow. We check the weather forecast, which tells us that it will be 25 degrees. Given the temperature, the function $q(\\cdot)$ then lets us that the optimal inventory stock is: $2+0.3*25=9.5$. Instead of determining the decision ourselves, we can also use the model's predict method:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7BOFGQYYXvRR",
        "outputId": "13f72520-43a1-49a0-eda5-f86dcbc22702"
      },
      "source": [
        "mdl.predict([[25]])"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[9.5]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OAQb_lFNNVeF"
      },
      "source": [
        "Of course, the Yaz dataset provides a lot more demand features than just the temperature. Conseqently, we are looking for a function of the form:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YzMrRbkQiJgw"
      },
      "source": [
        "\\begin{equation}\r\n",
        "q(x)=b+w_1*x_1+...+w_m*x_m=b+\\sum_{j=1}^{m}w_j*x_j,\r\n",
        "\\tag{7}\r\n",
        "\\end{equation}"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vChUo4t-rFxv"
      },
      "source": [
        "where $x_j$ represents the value of the $j$-th feature from samle $x$, and $w_j$ is the corresponding feature weight. As a result, the optimization problem that we want to solve becomes:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BbXqWP_6tO3X"
      },
      "source": [
        "\\begin{equation}\r\n",
        "\\min_{w_0,..,w_m} \\frac{1}{n}\\sum_{i=1}^{n}\\bigl[cu(d_i-b-\\sum_{j=1}^{m}w_j*x_{i,j})^+ + co(b+\\sum_{j=1}^{m}w_j*x_{i,j}-d_i)^+\\bigl],\r\n",
        "\\tag{8}\r\n",
        "\\end{equation}"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7UCTvrn_uTUe"
      },
      "source": [
        "In simple terms, we now have to learn the value for intercept term $b$ as well as the weight for each feature $w_1...,w_m$. To make things simple, we again use the class `LinearRegressionNewsvendor`. We fit the model to the training data and use the score function to determine the average costs on the training set. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_HEmZ9iAmlk6",
        "outputId": "3d0ec26e-7e96-4e49-825e-4286ca4c0882"
      },
      "source": [
        "LRN = LinearRegressionNewsvendor(cu=15,co=5)\r\n",
        "LRN.fit(X_train,y_train[\"STEAK\"])\r\n",
        "LRN_score = LRN.score(X_test,y_test[\"STEAK\"])\r\n",
        "print(\"Avg. cost LRN: \", LRN_score)"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Avg. cost LRN:  -48.932357245389476\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xgYKuDxQZbid"
      },
      "source": [
        "Again, we were able to reduce the average cost by taking the feature information into account compared to SAA."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oHf0VRI_aZxe"
      },
      "source": [
        "#### Deep Learning"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CwVF7OFEcroO"
      },
      "source": [
        "In the previouse section, we assumed that the demand is a linear combination of features. Consequently, to find the perfect mapping from features $x$ to decision $q$, we specified that $q(\\cdot)$ belongs to the class of linear decision functions. But sometimes there may not be a linear relationship and we need a more complex function to fit our data. One way to do this is by using a neural network (NN). Let us therefore have a look at a simple NN:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZLpyTsUOOvF2"
      },
      "source": [
        "<img src=\"https://drive.google.com/uc?export=view&id=1rmgdo9urd4Qx5MQrPu4sO9sto8_ogCm1\" align=\"center\">"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X_-Us5gRktd9"
      },
      "source": [
        "A neural network uses a cascade of many layers to obtain an output given some input data. In general it can be distingushed between input-, hidden-, and output-layer, each consisting of a number of neurons. In the first layer, the number of neurons corresoponds to the number of inputs. In other words, each neuron takes a single feature, e.g. the temperature or the weekday. The input-layer is followed by a number of hidden-layers, each consisting of an arbitary number of neurons. In the output-layer the number of neurons correspons to the number of outputs. In our example, we only have a single neuron that outputs the decision $q$ conditional on the features temperature and weekday. The individual neurons of a layer are each connected to the neurons of the layer before and behind. In a graph, the neurons can be represented as nodes and their connections as weighted edges. Let's now have a closer look at a neuron. A neuron takes as input the outputs of the neurons from the previous layer. Subsequently, it computes the weighted sum of inputs and adds a bias on it. More formally:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uWHieBeT1kva"
      },
      "source": [
        "\\begin{equation}\r\n",
        "bias+\\sum_{i=1}^{n}x_i*w_i \r\n",
        "\\tag{9}\r\n",
        "\\end{equation}"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tRysshwD16Nq"
      },
      "source": [
        "Does this look familiar? This is the exactly the decision function $(7)$ that we used in the regression based model before. The only difference is that we use the term \"bias\" for the constant value instead of \"intercept\". But what does this mean? If we were just to combine a set of linear functions, we would get a single linear function as a result. In other words, there would be no difference compared to the regression model. This is where the activation function comes into play. The activation function is a non-linear function that transforms the weighted sum and then outputs the final result. For example, the Rectified Linear Unit (ReLU) activation function, outpus $0$ if the input value is negative and otherwise its input. Thus, the neural network models a piecewise linear function, which looks like this:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m2HciRoCF_3D"
      },
      "source": [
        "<img src=\"https://drive.google.com/uc?export=view&id=18YRxB6jYlqV97FaEPXf-IcRuJt1nWkWI\"  width=\"350\" align=\"center\">"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mylaUwdjoYUx"
      },
      "source": [
        "The goal of the network is now to find the function that fits the data best. In the regression based model the problem therefore was to learn the optimal values for the feature weights and the intercept term. This is basicly the same here. We just have a lot more weights and intercept terms (biases). Since we are trying to obtain cost-optimal decisions, the network tries to determine the weights in a way that minimizes the average cost on our data.  Thus, the problem can be stated as follows:  "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K3trnHXwpI93"
      },
      "source": [
        "\\begin{equation}\r\n",
        "\\min_{w,b} \\frac{1}{n}\\sum_{i=1}^{n}\\bigl[cu(d_i-\\theta(x_i;w,b))^+ + co(\\theta(x_i;w,b)-d_i)^+\\bigl],\r\n",
        "\\tag{10}\r\n",
        "\\end{equation}"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rLMKccx7sRJh"
      },
      "source": [
        "where $\\theta(\\cdot)$ represents the function of the network with weights $w$ and biases $b$. Now look, this is again similar to equation $(6)$. The only difference is that $q(\\cdot)$ is represented by a NN."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e8ZDdC5_5bzK"
      },
      "source": [
        "Let us now apply this approach on our Yaz dataset. We can therefore use the class `DeepLearningNewsvendor` from `ddop`. As before, we first initialize the model and fit it to the training data. Subsequently we calculate the average cost on the test set by using the score function."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZOljfgX06UIG",
        "outputId": "e565cb92-66df-4b30-b39d-97c06c086c81"
      },
      "source": [
        "DLN = DeepLearningNewsvendor(cu=15,co=5)\r\n",
        "DLN.fit(X_train,y_train[\"STEAK\"])\r\n",
        "DLN_score = DLN.score(X_test,y_test[\"STEAK\"])\r\n",
        "print(\"Avg. cost DLN: \", DLN_score)"
      ],
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Avg. cost DLN:  -50.968472254903695\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TQA0r0hAgL0l"
      },
      "source": [
        "### Summary\r\n",
        "\r\n",
        "In this part of the tutorial we have seen three differnet data driven approaches to prescribe decisions directly from data. Let us now summarize what we have learned:\r\n",
        "\r\n",
        "* In the simplest case where we only have past demand observations we can use sample average approximation (SAA) to solve the newsvendor problem. The goal of SAA is to find the decision q that minimizes the average costs on past demand samples.\r\n",
        "* However, we have seen that additional demand features can improve decision making since they usually reduce the degree of uncertainty.\r\n",
        "* With weighted sample average approximation (wSAA) and empirical risk minimization (ERM) we have then seen two data driven approaches that can take such features into account by using a function $q(\\cdot)$ that maps from features $x$ to a decision $q$. \r\n",
        "* WSAA defines the function $q(\\cdot)$ point-wise. It is based on deriving sample weights from features and optimizing SAA against a re-weighting of the training data. To determine the weights we can use different weight functions e.g. based on k-nearest-neighbor regression,regression trees or random forest regression. \r\n",
        "* The ERM approach, on the other hand, tries to find the function $q(\\cdot)$ that maps directly from features to a decision by minimizing its empirical risk. Therefore, we have to specify the function class to which the decision function belongs. With the classical ERM newsvendor, and the deep learning newsvendor we have seen two methods that define $q(\\cdot)$ in a different manner. While the former one assumes that $q(\\cdot)$ is a linear decision function given by the weighted sum of features, the later one defines $q(\\cdot)$ as a deep neural network"
      ]
    }
  ]
}